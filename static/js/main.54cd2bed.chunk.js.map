{"version":3,"sources":["components/Content/index.tsx","components/Footer/index.tsx","components/Header/index.tsx","App.tsx","reportWebVitals.ts","store.ts","index.tsx"],"names":["Content","useState","img","setImg","canvas","setCanvas","canvasSize","setCanvasSize","fontSize","setFontSize","loaded","setLoaded","shinjiroNumber","setShinjiroNumber","useEffect","document","getElementById","Image","window","location","host","src","onload","windowWidth","body","clientWidth","imgWidth","width","height","console","log","scale","ctx","fontsize","color","getContext","font","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","fillStyle","textBaseline","textAlign","getCanvasContext","x1","y1","x2","y2","drawImage","fillText","length","targetImg","toDataURL","drawText","className","id","alt","placeholder","onChange","event","value","num","target","String","replace","all","fromCharCode","charCodeAt","href","onClick","e","base64","a","download","Date","getTime","Footer","rel","Header","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","ReactDOM","render","StrictMode"],"mappings":"mOA8IeA,EA5IC,WAAO,IAAD,EACIC,mBAAqB,MADzB,mBACXC,EADW,KACNC,EADM,OAEUF,mBAAqB,MAF/B,mBAEXG,EAFW,KAEHC,EAFG,OAGkBJ,mBAAkC,MAHpD,mBAGXK,EAHW,KAGCC,EAHD,OAIcN,mBAAwB,MAJtC,mBAIXO,EAJW,KAIDC,EAJC,OAKUR,oBAAS,GALnB,mBAKXS,EALW,KAKHC,EALG,OAM0BV,mBAAS,gBANnC,mBAMXW,EANW,KAMKC,EANL,KAqHlB,OAzFAC,qBAAU,WACN,IAAMV,EAAcW,SAASC,eAAe,oBAC5C,GAAe,OAAXZ,EAAJ,CAIA,IAAMF,EAAM,IAAIe,MAChBd,EAAOD,GACPG,EAAUD,GACmB,mBAAzBc,OAAOC,SAASC,KAChBlB,EAAImB,IAAM,yCACTnB,EAAImB,IAAM,eACfnB,EAAIoB,OAAS,WACT,IAAMC,EAAcR,SAASS,KAAKC,YAC5BC,EAAWxB,EAAIyB,MACjBA,EAAQzB,EAAIyB,MACZC,EAAS1B,EAAI0B,OACbpB,EAAW,GAEf,GAAIe,EAAcG,EAAU,CACxBG,QAAQC,IAAIP,EAAaG,GACzB,IAAMK,EAAQ,IACdJ,EAAQJ,EAAcQ,EACtBH,EAAS1B,EAAI0B,QAAUL,EAAcG,GAAYK,EACjDvB,EAAWA,GAAYe,EAAcG,GAAYK,EAGrD3B,EAAOuB,MAAQA,EACfvB,EAAOwB,OAASA,EAChBrB,EAAc,CAACoB,EAAOC,IACtBnB,EAAYD,GACZG,GAAU,SA5BVkB,QAAQC,IAAI,oBA8BjB,IACHhB,qBAAU,WAkDFJ,GArCa,SAACE,GAGd,GACY,OAARV,GACW,OAAXE,GACe,OAAfE,GACa,OAAbE,EACF,CACE,IAAMwB,EArBW,SAACC,EAAkBC,GACxC,IAAMF,EAAM5B,EAAO+B,WAAW,MAS9B,OARAH,EAAII,KAAJ,eAAmBH,EAAnB,YACAD,EAAIK,YAAc,OAClBL,EAAIM,cAAgB,EACpBN,EAAIO,cAAgB,EACpBP,EAAIQ,WAAa,EACjBR,EAAIS,UAAYP,EAChBF,EAAIU,aAAe,SACnBV,EAAIW,UAAY,OACTX,EAWSY,CAAiBpC,EAAU,WACjCqC,EAAMzC,EAAOuB,MAAQ,IAAO,GAC5BmB,EAAM1C,EAAOwB,OAAS,IAAO,GAC7BmB,EAAM3C,EAAOuB,MAAQ,IAAO,GAC5BqB,EAAM5C,EAAOwB,OAAS,IAAO,GAEnCI,EAAIiB,UACA/C,EACA,EACA,EACAA,EAAIyB,MACJzB,EAAI0B,OACJ,EACA,EACAtB,EAAW,GACXA,EAAW,IAEf0B,EAAIkB,SAzBM,mGAyBUL,EAAIC,GACxBd,EAAIkB,SAzBG,uCAyBaH,EAAKvC,EAAWI,EAAeuC,OAAQH,GAC3DhB,EAAIS,UAAY,UAChBT,EAAIkB,SAAStC,EAAgBmC,EAAIC,GAEjC,IAAMI,EAAiBrC,SAASC,eAAe,gBAC/CoC,EAAU/B,IAAMjB,EAAOiD,UAAU,aACjCD,EAAUzB,MAAQvB,EAAOuB,MACzByB,EAAUxB,OAASxB,EAAOwB,QAI9B0B,CAAS1C,KAEd,CAACF,EAAQE,EAAgBR,EAAQF,EAAKI,EAAYE,IAGjD,sBAAK+C,UAAU,GAAf,UACI,wBAAQC,GAAG,mBAAmBD,UAAU,WACxC,qBAAKC,GAAG,eAAeD,UAAU,GAAGE,IAAI,yCACxC,uBACIC,YAAY,mDACZH,UAAU,6CACVI,SApHe,SAACC,GACxB,IAAqBC,EAMfC,GANeD,EAMGD,EAAMG,OAAOF,OAJ1BG,OAAOH,GAAOI,QAAQ,UAAU,SAAUC,GAC7C,OAAOF,OAAOG,aAAaD,EAAIE,WAAW,GAAK,UAFhCP,EAMvBhD,EAAkBiD,MA8Gd,qBAAKP,UAAU,iCAAf,SACI,mBACIc,KAAK,IACLd,UAAU,4KACVe,QA/GO,SAACC,GACpB,GAAe,OAAXnE,EAAiB,CACjB,IAAMoE,EAASpE,EAAOiD,UAAU,aAC1BoB,EAAIF,EAAER,OACZU,EAAEJ,KAAOG,EACTC,EAAEC,UAAW,IAAIC,MAAOC,UAAY,SA2G5BF,SAAS,GAJb,0EC/GDG,EAlBA,WACX,OACI,qBAAKtB,UAAU,mBAAf,SACI,oDACS,IACL,mBACIQ,OAAO,SACPe,IAAI,aACJvB,UAAU,YACVc,KAAK,+BAJT,wBCeDU,EApBA,WACX,OACI,sBAAKxB,UAAU,yDAAf,UACI,oBAAIA,UAAU,oDAAd,SACI,mBAAGc,KAAK,6BAAR,kFAEJ,8BACI,mBACIN,OAAO,SACPe,IAAI,aACJT,KAAK,4DACLd,UAAU,4JAJd,qCCODyB,MAVf,WACI,OACI,sBAAKzB,UAAU,2DAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCKG0B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,cCNDQ,EAAQC,YAAe,CAClCC,QAAS,KCIXC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGR3E,SAASC,eAAe,SAM5BiE,M","file":"static/js/main.54cd2bed.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst Content = () => {\n    const [img, setImg] = useState<null | any>(null);\n    const [canvas, setCanvas] = useState<null | any>(null);\n    const [canvasSize, setCanvasSize] = useState<null | [number, number]>(null);\n    const [fontSize, setFontSize] = useState<null | number>(null);\n    const [loaded, setLoaded] = useState(false);\n    const [shinjiroNumber, setShinjiroNumber] = useState('４６');\n\n    const handleNumberChange = (event: { target: { value: any } }) => {\n        const toFullWidth = (value: string) => {\n            if (!value) return value;\n            return String(value).replace(/[!-~]/g, function (all) {\n                return String.fromCharCode(all.charCodeAt(0) + 0xfee0);\n            });\n        };\n        const num = toFullWidth(event.target.value);\n        setShinjiroNumber(num);\n    };\n\n    const handleDownload = (e: any) => {\n        if (canvas !== null) {\n            const base64 = canvas.toDataURL('image/png');\n            const a = e.target;\n            a.href = base64;\n            a.download = new Date().getTime() + '.png';\n        }\n    };\n\n    useEffect(() => {\n        const canvas: any = document.getElementById('generator-canvas');\n        if (canvas === null) {\n            console.log('canvas is null');\n            return;\n        }\n        const img = new Image();\n        setImg(img);\n        setCanvas(canvas);\n        if (window.location.host === 'localhost:3000')\n            img.src = 'shinjiro-number-generator/shinjiro.png';\n        else img.src = 'shinjiro.png';\n        img.onload = () => {\n            const windowWidth = document.body.clientWidth;\n            const imgWidth = img.width;\n            let width = img.width;\n            let height = img.height;\n            let fontSize = 35;\n\n            if (windowWidth < imgWidth) {\n                console.log(windowWidth, imgWidth);\n                const scale = 0.95;\n                width = windowWidth * scale;\n                height = img.height * (windowWidth / imgWidth) * scale;\n                fontSize = fontSize * (windowWidth / imgWidth) * scale;\n            }\n\n            canvas.width = width;\n            canvas.height = height;\n            setCanvasSize([width, height]);\n            setFontSize(fontSize);\n            setLoaded(true);\n        };\n    }, []);\n    useEffect(() => {\n        const getCanvasContext = (fontsize: number, color: string) => {\n            const ctx = canvas.getContext('2d');\n            ctx.font = `bold ${fontsize}px serif`;\n            ctx.shadowColor = '#000';\n            ctx.shadowOffsetX = 2;\n            ctx.shadowOffsetY = 1;\n            ctx.shadowBlur = 3;\n            ctx.fillStyle = color;\n            ctx.textBaseline = 'center';\n            ctx.textAlign = 'left';\n            return ctx;\n        };\n        const drawText = (shinjiroNumber: string) => {\n            const line1 = 'おぼろげながら浮かんできたんです';\n            const line2 = `という数字が`;\n            if (\n                img !== null &&\n                canvas !== null &&\n                canvasSize !== null &&\n                fontSize !== null\n            ) {\n                const ctx = getCanvasContext(fontSize, '#e5e5e5');\n                const x1 = (canvas.width / 100) * 20;\n                const y1 = (canvas.height / 100) * 88;\n                const x2 = (canvas.width / 100) * 20;\n                const y2 = (canvas.height / 100) * 95;\n\n                ctx.drawImage(\n                    img,\n                    0,\n                    0,\n                    img.width,\n                    img.height,\n                    0,\n                    0,\n                    canvasSize[0],\n                    canvasSize[1]\n                );\n                ctx.fillText(line1, x1, y1);\n                ctx.fillText(line2, x2 + fontSize * shinjiroNumber.length, y2);\n                ctx.fillStyle = '#C77552';\n                ctx.fillText(shinjiroNumber, x2, y2);\n\n                const targetImg: any = document.getElementById('shinjiro-img');\n                targetImg.src = canvas.toDataURL('image/png');\n                targetImg.width = canvas.width;\n                targetImg.height = canvas.height;\n            }\n        };\n        if (loaded) {\n            drawText(shinjiroNumber);\n        }\n    }, [loaded, shinjiroNumber, canvas, img, canvasSize, fontSize]);\n\n    return (\n        <div className=\"\">\n            <canvas id=\"generator-canvas\" className=\"hidden\"></canvas>\n            <img id=\"shinjiro-img\" className=\"\" alt=\"進次郎の画像\" />\n            <input\n                placeholder=\"数字を入力してね\"\n                className=\"w-full text-center p-10 focus:outline-none\"\n                onChange={handleNumberChange}\n            ></input>\n            <div className=\"w-full flex justify-center p-8\">\n                <a\n                    href=\"/\"\n                    className=\"cursor-pointer inline-block text-sm px-20 py-6 leading-none border rounded text-accentsub border-accentsub hover:border-accentsubhov hover:text-accentsubhov mt-4 lg:mt-0\"\n                    onClick={handleDownload}\n                    download=\"\"\n                >\n                    画像をダウンロード\n                </a>\n            </div>\n        </div>\n    );\n};\n\nexport default Content;\n","const Footer = () => {\n    return (\n        <div className=\"text-accent p-10\">\n            <p>\n                作成者:{' '}\n                <a\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    className=\"underline\"\n                    href=\"https://twitter.com/hnkz1015\"\n                >\n                    hnkz\n                </a>\n            </p>\n        </div>\n    );\n};\n\nexport default Footer;\n","const Header = () => {\n    return (\n        <div className=\"w-full flex items-center justify-between flex-wrap p-6\">\n            <h1 className=\"font-semibold text-accent text-3xl tracking-tight\">\n                <a href=\"/shinjiro-number-generator\">進次郎数字ジェネレータ</a>\n            </h1>\n            <div>\n                <a\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    href=\"https://github.com/wan-nyan-wan/shinjiro-number-generator\"\n                    className=\"inline-block text-sm px-4 py-2 leading-none border rounded text-accentsub border-accentsub hover:border-accentsubhov hover:text-accentsubhov mt-4 lg:mt-0\"\n                >\n                    Github Repository\n                </a>\n            </div>\n        </div>\n    );\n};\n\nexport default Header;\n","import Content from './components/Content';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\n\nfunction App() {\n    return (\n        <div className=\"bg-main flex flex-col items-center justify-center h-full\">\n            <Header />\n            <Content />\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\n// ...\n\nexport const store = configureStore({\n  reducer: {\n  }\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}